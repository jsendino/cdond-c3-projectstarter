version: 2.1

commands:
  destroy_environment:
    description: "Destroys CloudFormation stack"
    parameters:
      env_name: 
        type: string
    steps:
      - run:
          name: Destroy env if error
          command: |
            if cat /etc/os-release | grep "rhel" ; then
              yum update
              yum install awscli
            elif cat /etc/os-release | grep "alpine" ; then
              echo "AWS CLI not available in alpine"
            else
              sudo apt-get update
              sudo apt-get install awscli -y
            fi
            aws cloudformation delete-stack --stack-name << parameters.env_name >> 
          when: on_fail

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm i
              npm run build
              tar -czvf artifact.tz dist 
      - save_cache:
          paths: [backend/*]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
              cd frontend
              npm i
              npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test
          command: |
              cd backend
              ls 
              npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
              cd frontend
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-end test
          command: |
              cd backend
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: cibuilds/aws:1.16.1
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text >> .circleci/ansible/ip.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/ip.txt
      # Here's where you will add some code to rollback on failure  
      - destroy_environment:
          env_name: "backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          env_name: "frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["65:25:32:d2:c6:d1:d5:3f:a0:b1:2c:77:e2:d3:0f:bb"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            sudo pip3 install ansible
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cat .circleci/ansible/ip.txt >> .circleci/ansible/inventory.txt
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
      - destroy_environment:
          env_name: "backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          env_name: "frontend-${CIRCLE_WORKFLOW_ID:0:7}"   

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations >> ../migrations_result.txt
      - run:
          name: Send migration results to memstash
          command: |
            if cat migrations_result.txt | grep "has been executed successfully" ; then
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT --data "sucess" \
              https://api.memstash.io/values/migration_result
            else
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT --data "fail" \
              https://api.memstash.io/values/migration_result
            fi
      - destroy_environment:
          env_name: "backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          env_name: "frontend-${CIRCLE_WORKFLOW_ID:0:7}"   

  deploy-frontend:
    docker:
      - image: cibuilds/aws:1.16.1
    steps:  
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Install dependencies
          command : |
            apk update
            apk add --update nodejs
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=`cat .circleci/ansible/ip.txt`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp --recursive ./dist/ s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure     
      - destroy_environment:
          env_name: "backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          env_name: "frontend-${CIRCLE_WORKFLOW_ID:0:7}"   

  deploy-backend:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["65:25:32:d2:c6:d1:d5:3f:a0:b1:2c:77:e2:d3:0f:bb"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            sudo pip3 install ansible
            sudo apt-get update
            sudo apt-get install -y nodejs npm tar
      - run: 
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
      - run:
          name: Deploy backend
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cat .circleci/ansible/ip.txt >> .circleci/ansible/inventory.txt

            mkdir .circleci/ansible/roles/deploy/files
            ls 
            tar -czf backend.tar.gz backend
            cp backend.tar.gz .circleci/ansible/roles/deploy/files/backend.tar.gz
            
            ansible-playbook .circleci/ansible/deploy-backend.yml -i .circleci/ansible/inventory.txt
      - destroy_environment:
          env_name: "backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          env_name: "frontend-${CIRCLE_WORKFLOW_ID:0:7}" 

  smoke-test:
    docker:
      - image: alpine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=`cat .circleci/ansible/ip.txt`
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-eu-west-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 0
            else
            return 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            curl "${BACKEND_IP}:3000/api/status"
      
      # - destroy_environment:
      #     env_name: "backend-${CIRCLE_WORKFLOW_ID:0:7}"
      # - destroy_environment:
      #     env_name: "frontend-${CIRCLE_WORKFLOW_ID:0:7}" 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]